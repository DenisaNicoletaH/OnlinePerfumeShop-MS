  services:
    api-gateway:
      build: api-gateway
      hostname: api-gateway
      ports:
        - "8080:8080"
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        - client-service
        - product-service
        - checkout-service
    client-service:
      build: clients-service
      hostname: client-service
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        mysql1:
          condition: service_healthy

    product-service:
      build: products-service
      hostname: product-service
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        mysql2:
          condition: service_healthy

    checkout-service:
      build: checkout-service
      hostname: checkout-service
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        mysql3:
          condition: service_healthy

    delivery-service:
      build: delivery-service
      hostname: delivery-service
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        mysql4:
          condition: service_healthy



    mysql1:
      image: mysql:5.7
      ports:
        - "3307:3306"
      environment:
        - MYSQL_ROOT_PASSWORD=rootpwd
        - MYSQL_DATABASE=clients-db
        - MYSQL_USER=user
        - MYSQL_PASSWORD=pwd
      volumes:
        - ./data/mysql1:/var/lib/mysql1
        - ./data/init.d:/docker-entrypoint-initdb.d
      healthcheck:
        test:
          [
            "CMD",
            "mysqladmin",
            "ping",
            "-uuser",
            "-ppwd",
            "-h",
            "localhost",
          ]
        interval: 10s
        timeout: 5s
        retries: 10



    mysql2:
      image: mysql:5.7
      ports:
        - "3308:3306"
      environment:
        - MYSQL_ROOT_PASSWORD=rootpwd
        - MYSQL_DATABASE=products-db
        - MYSQL_USER=user
        - MYSQL_PASSWORD=pwd
      volumes:
        - ./data/mysql2:/var/lib/mysql2
        - ./data/init.d:/docker-entrypoint-initdb.d
      healthcheck:
        test:
          [
            "CMD",
            "mysqladmin",
            "ping",
            "-uuser",
            "-ppwd",
            "-h",
            "localhost",
          ]
        interval: 10s
        timeout: 5s
        retries: 10

    mysql3:
      image: mysql:5.7
      ports:
        - "3309:3306"
      environment:
        - MYSQL_ROOT_PASSWORD=rootpwd
        - MYSQL_DATABASE=checkout-db
        - MYSQL_USER=user
        - MYSQL_PASSWORD=pwd
      volumes:
        - ./data/mysql3:/var/lib/mysql3
        - ./data/init.d:/docker-entrypoint-initdb.d
      healthcheck:
        test:
          [
            "CMD",
            "mysqladmin",
            "ping",
            "-uuser",
            "-ppwd",
            "-h",
            "localhost",
          ]
        interval: 10s
        timeout: 5s
        retries: 10

    mysql4:
      image: mysql:5.7
      ports:
        - "3310:3306"
      environment:
        - MYSQL_ROOT_PASSWORD=rootpwd
        - MYSQL_DATABASE=delivery-db
        - MYSQL_USER=user
        - MYSQL_PASSWORD=pwd
      volumes:
        - ./data/mysql4:/var/lib/mysql4
        - ./data/init.d:/docker-entrypoint-initdb.d
      healthcheck:
        test:
          [
            "CMD",
            "mysqladmin",
            "ping",
            "-uuser",
            "-ppwd",
            "-h",
            "localhost",
          ]
        interval: 10s
        timeout: 5s
        retries: 10


    mongodb:
      image: mongo
      container_name: mongo_db
      ports:
        - 27017:27017
      volumes:
        - mongo:/data
      environment:
        - MONGO_INITDB_ROOT_USERNAME=user
        - MONGO_INITDB_ROOT_PASSWORD=pwd
    mongo-express:
      image: mongo-express
      container_name: mongo-express
      restart: always
      ports:
        - 8081:8081
      environment:
        - ME_CONFIG_MONGODB_ADMINUSERNAME=user
        - ME_CONFIG_MONGODB_ADMINPASSWORD=pwd
        - ME_CONFIG_MONGODB_SERVER=mongodb
  volumes:
    mongo: {}